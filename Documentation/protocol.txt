Der Protokoll-Stack ist an das OSI-Modell angelehnt. Wir haben
drei Schichten:

        +-------------------------+
        | Application (App)       |
        +-------------------------+
        | Communication Handler   |
        +-------------------------+
        | I³C Bus                 |
        | (I²C-Bus + INT-Leitung) |
        +-------------------------+

Die Ebene des Communication Handlers definiert sich wie folgt:
Paketarten
==========

Datenpakete
-----------
Datenpakete dienen der Übertragung von Opcodes und Daten und können in
Frames zusammengefasst werden. Ein Datenpaket besteht aus 2 Bytes zu je
8 Bit und hat folgenden Aufbau:

+--------------+--------------+
| Data         | PC | CS | CRC|
+--------------+--------------+

 Data: 8 Bits Payload
 PC:   3 Bits
 CS:   2 Bits
 CRC:  3 Bits

 * PC ist der Packet Counter im aktuellen Frame. Bei CS=2 wird dieser auf die
   Anzahl der noch folgenden Pakete im Frame gesetzt. Bei jedem Paket im Frame
   wird der PC dekrementiert.
 * CS ist ein Status und ist als Zahl kodiert. Damit ergeben sich die
   Zustände:
    0) ACK (alles ist OK)
    1) Unterscheidung nach Kommunikationsrichtung:
       a) client-to-server: DATA (es gibt auch nach Abarbeitung des aktuellen 
          Frames noch weitere Daten)
       b) server-to-client: RSTART (es handelt sich um einen Re-Transmit
          eines bereits gesendeten Start-Frames)
    2) START (leitet einen neuen Frame ein)
    3) ERROR (Es kam zu einem Problem bei der Datenübertragung. Anforderung,
	     der erneuten Übermittlung des Pakets) Der eigentliche
	     Fehler ist im DATA-Teil des Pakets per ERROR-Status-Byte
	     beschrieben
 * CRC ist eine 3-bittige Checksumme über die restlichen 13 Bit.
   

Wenn CS=2 ist, enthält das Daten-Byte ein 8-Bit Command.
 
 
Aufbau des ERROR-Status-Byte
----------------------------

0 - Abort        - Abbruch der Kommunikation, Verwerfen des aktuellen
                   Frames
1 - CRC Fehler   - das letzte Paket wird erneut verschickt
2 - FRAME-ERROR  - Der Frame wird aufgrund von Paketverlust verworfen, 
		   Der Master startet die Übertragung des Frames erneut.
3 - OPCODE-ERROR - Der OPCode wurde nicht erkannt

Struktur eines Frames:
---------------------

          +--------------+----------------+
Paket 1   | OPCode       | 111 | 10 | CRC |
          +--------------+----------------+
Paket 2   | Parameter 1  | 111 | 00 | CRC |
          +--------------+----------------+
Paket 3   | Parameter 2  | 110 | 00 | CRC |
          +--------------+----------------+
Paket 4   | Parameter 3  | 101 | 00 | CRC |
          +--------------+----------------+
Paket 5   | Parameter 4  | 100 | 00 | CRC |
          +--------------+----------------+
Paket 6   | Parameter 5  | 011 | 00 | CRC |
          +--------------+----------------+
Paket 7   | Parameter 6  | 010 | 00 | CRC |
          +--------------+----------------+
Paket 8   | Parameter 7  | 001 | 00 | CRC |
          +--------------+----------------+
Paket 9   | Parameter 8  | 000 | 00 | CRC |
          +--------------+----------------+

Management-Pakete
=================
Managementpakete dienen der Steuerung des Protokolls und bestehen aus 2
Byte. Wird vom Slave ein Datenpaket empfangen, wird mit einem
Managementpaket geantwortet.

+--------------+--------------+
|  DATA (?)    | PC | CS | CRC|
+--------------+--------------+

* PC:    3 Bits
* CS:    2 Bits
* CRC:   3 Bit

* PC  ist der Wert des PC des Datenpakets auf den sich dieses Managementpaket
      bezieht
* CS  ist der als Zahl kodierte Status. Es ergeben sich die selben
      Zustände wie bei Datenpaketen.
* CRC Checksumme des Managementpakets. Es kommt der selbe Algorithmus wie bei
      den Datenpaketen zum Einsatz.

Sofern ein Managementpaket das letzte Paket eines Frames quittiert und
dieses Frame eine Anfrage zum Senden von Daten (OPCodes 2,3)
beinhaltet, enthält der DATA-Teil den Wert des zu lesenden Datenbytes.


Verhalten
=========

* Jedes Paket wird vom Empfänger anhand der CRC geprüft und mit Hilfe
  eines Management-Pakets quittiert. Der Master reagiert entsprechend
  der Übertragungserfolgsnachricht.
* Jeder Client muss das Daten-Byte des letzten vom client verschickten
  Pakets so bereit halten, bis das nächste Paket erfolgreich ausgewertet
  ist.


Ablauf von Kommunikation im Regelfall
=====================================
Darstellung der Kommunikation zur Statusabfrage mit anschließendem Lesen von
Daten.

t
|  Master                                Client
|  =================================     =================================
|
|  +--------------+--------------+
|  |       2      | 0 |  1 | CRC |
|  +--------------+--------------+
|                                         +--------------+--------------+
|                                         |   STATUS     | 0 |  2 | CRC |
|                                         +--------------+--------------+
|  Die Status-Abfrage war erfolgreich. Der Master fragt die vorliegenden
|  Daten an
|  +--------------+--------------+
|  |       3      | 2  1 | CRC |
|  +--------------+--------------+
|					MGMT-ACK
|  +--------------+--------------+
|  |   address 1  | 1 |  1 | CRC |
|  +--------------+--------------+
|					MGMT-ACK
|  +--------------+--------------+
|  |   address 2  | 0 |  1 | CRC |
|  +--------------+--------------+
|					MGMT-ACK inklusive Daten-Byte
|	
|
|  An dieser Stelle tritt eine Störung des i²C-Bus auf. Die CRC-Berechnung 
|  kommt nach der Übermittlung master-seitig nicht zum selben Ergebnis. Der
|  Master fragt erneut an.
|  +--------------+--------------+
|  |           1  | 0 |  3 | CRC |
|  +--------------+--------------+
|					MGMT-ACK inklusive Daten-Byte
|
|  Nach einer erneute Statusabfrage darf der Client das Daten-Byte freigeben.
|  +--------------+--------------+
|  |       2      | 0 |  2 | CRC |
|  +--------------+--------------+
|                                         +--------------+--------------+
|  				          |   STATUS     | 0 |  0 | CRC |
|                                         +--------------+--------------+
|
|
v

Ablauf von Kommunikation im Fehlerfall
======================================

OPCodes
=======

1 Reset bewirkt einen Reboot des Clients.
2 Statusabfrage Mit Daten über den Application Status
3 Register lesen
4 Register schreiben
5 Firmware-Update Management (mit Sub-Kommando etc im Frame)
6 Firmware-Update Daten

